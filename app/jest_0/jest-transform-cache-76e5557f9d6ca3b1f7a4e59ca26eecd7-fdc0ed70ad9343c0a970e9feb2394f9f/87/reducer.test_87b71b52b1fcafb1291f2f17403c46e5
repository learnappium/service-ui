d8e3bdfda42b2a524be27a5b9d0fbcd8
'use strict';var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);var _extends2 = require('babel-runtime/helpers/extends');var _extends3 = _interopRequireDefault(_extends2);var _constants = require('./constants');









var _reducer = require('./reducer');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('dashboard reducer', function () {
  test('should return initial state', function () {
    expect((0, _reducer.dashboardReducer)(undefined, {})).toBe(_constants.INITIAL_STATE);
  });

  test('should return old state on unknown action', function () {
    var oldState = { foo: 1 };
    expect((0, _reducer.dashboardReducer)(oldState, { type: 'foo' })).toBe(oldState);
  });

  test('should handle FETCH_DASHBOARD_SUCCESS', function () {
    var payload = [{ id: 0 }, { id: 1 }];
    var newState = (0, _reducer.dashboardReducer)(undefined, {
      type: _constants.FETCH_DASHBOARD_SUCCESS,
      payload: payload });

    expect(newState).toEqual((0, _extends3.default)({},
    _constants.INITIAL_STATE, {
      dashboardItems: payload }));

  });

  test('should handle ADD_DASHBOARD_ITEM_SUCCESS', function () {
    var payload = { id: 1 };
    var oldState = (0, _extends3.default)({},
    _constants.INITIAL_STATE, {
      dashboardItems: [{ id: 0 }] });

    var newState = (0, _reducer.dashboardReducer)(oldState, {
      type: _constants.ADD_DASHBOARD_ITEM_SUCCESS,
      payload: payload });

    expect(newState).toEqual((0, _extends3.default)({},
    oldState, {
      dashboardItems: [].concat((0, _toConsumableArray3.default)(oldState.dashboardItems), [payload]) }));

  });

  test('should handle DELETE_DASHBOARD_ITEM_SUCCESS', function () {
    var payload = 1;
    var oldState = (0, _extends3.default)({},
    _constants.INITIAL_STATE, {
      dashboardItems: [{ id: 0 }, { id: 1 }] });

    var newState = (0, _reducer.dashboardReducer)(oldState, {
      type: _constants.DELETE_DASHBOARD_ITEM_SUCCESS,
      payload: payload });

    expect(newState).toEqual((0, _extends3.default)({},
    oldState, {
      dashboardItems: [{ id: 0 }] }));

  });

  test('should handle UPDATE_DASHBOARD_ITEM_SUCCESS', function () {
    var payload = { id: 1, foo: 2 };
    var oldState = (0, _extends3.default)({},
    _constants.INITIAL_STATE, {
      dashboardItems: [{ id: 0 }, { id: 1 }] });

    var newState = (0, _reducer.dashboardReducer)(oldState, {
      type: _constants.UPDATE_DASHBOARD_ITEM_SUCCESS,
      payload: payload });

    expect(newState).toEqual((0, _extends3.default)({},
    oldState, {
      dashboardItems: [{ id: 0 }, payload] }));

  });

  test('should handle CHANGE_VISIBILITY_TYPE', function () {
    var oldState = (0, _extends3.default)({},
    _constants.INITIAL_STATE, {
      gridType: _constants.DASHBOARDS_GRID_VIEW });

    var newState = (0, _reducer.dashboardReducer)(oldState, {
      type: _constants.CHANGE_VISIBILITY_TYPE,
      payload: _constants.DASHBOARDS_TABLE_VIEW });

    expect(newState).toEqual((0, _extends3.default)({},
    oldState, {
      gridType: _constants.DASHBOARDS_TABLE_VIEW }));

  });
});;var _temp = function () {if (typeof __REACT_HOT_LOADER__ === 'undefined') {return;}}();;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZXIudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsInRlc3QiLCJleHBlY3QiLCJ1bmRlZmluZWQiLCJ0b0JlIiwiSU5JVElBTF9TVEFURSIsIm9sZFN0YXRlIiwiZm9vIiwidHlwZSIsInBheWxvYWQiLCJpZCIsIm5ld1N0YXRlIiwiRkVUQ0hfREFTSEJPQVJEX1NVQ0NFU1MiLCJ0b0VxdWFsIiwiZGFzaGJvYXJkSXRlbXMiLCJBRERfREFTSEJPQVJEX0lURU1fU1VDQ0VTUyIsIkRFTEVURV9EQVNIQk9BUkRfSVRFTV9TVUNDRVNTIiwiVVBEQVRFX0RBU0hCT0FSRF9JVEVNX1NVQ0NFU1MiLCJncmlkVHlwZSIsIkRBU0hCT0FSRFNfR1JJRF9WSUVXIiwiQ0hBTkdFX1ZJU0lCSUxJVFlfVFlQRSIsIkRBU0hCT0FSRFNfVEFCTEVfVklFVyJdLCJtYXBwaW5ncyI6IjJRQUFBOzs7Ozs7Ozs7O0FBVUEsb0M7O0FBRUFBLFNBQVMsbUJBQVQsRUFBOEIsWUFBTTtBQUNsQ0MsT0FBSyw2QkFBTCxFQUFvQyxZQUFNO0FBQ3hDQyxXQUFPLCtCQUFpQkMsU0FBakIsRUFBNEIsRUFBNUIsQ0FBUCxFQUF3Q0MsSUFBeEMsQ0FBNkNDLHdCQUE3QztBQUNELEdBRkQ7O0FBSUFKLE9BQUssMkNBQUwsRUFBa0QsWUFBTTtBQUN0RCxRQUFNSyxXQUFXLEVBQUVDLEtBQUssQ0FBUCxFQUFqQjtBQUNBTCxXQUFPLCtCQUFpQkksUUFBakIsRUFBMkIsRUFBRUUsTUFBTSxLQUFSLEVBQTNCLENBQVAsRUFBb0RKLElBQXBELENBQXlERSxRQUF6RDtBQUNELEdBSEQ7O0FBS0FMLE9BQUssdUNBQUwsRUFBOEMsWUFBTTtBQUNsRCxRQUFNUSxVQUFVLENBQUMsRUFBRUMsSUFBSSxDQUFOLEVBQUQsRUFBWSxFQUFFQSxJQUFJLENBQU4sRUFBWixDQUFoQjtBQUNBLFFBQU1DLFdBQVcsK0JBQWlCUixTQUFqQixFQUE0QjtBQUMzQ0ssWUFBTUksa0NBRHFDO0FBRTNDSCxzQkFGMkMsRUFBNUIsQ0FBakI7O0FBSUFQLFdBQU9TLFFBQVAsRUFBaUJFLE9BQWpCO0FBQ0tSLDRCQURMO0FBRUVTLHNCQUFnQkwsT0FGbEI7O0FBSUQsR0FWRDs7QUFZQVIsT0FBSywwQ0FBTCxFQUFpRCxZQUFNO0FBQ3JELFFBQU1RLFVBQVUsRUFBRUMsSUFBSSxDQUFOLEVBQWhCO0FBQ0EsUUFBTUo7QUFDREQsNEJBREM7QUFFSlMsc0JBQWdCLENBQUMsRUFBRUosSUFBSSxDQUFOLEVBQUQsQ0FGWixHQUFOOztBQUlBLFFBQU1DLFdBQVcsK0JBQWlCTCxRQUFqQixFQUEyQjtBQUMxQ0UsWUFBTU8scUNBRG9DO0FBRTFDTixzQkFGMEMsRUFBM0IsQ0FBakI7O0FBSUFQLFdBQU9TLFFBQVAsRUFBaUJFLE9BQWpCO0FBQ0tQLFlBREw7QUFFRVEsaUVBQW9CUixTQUFTUSxjQUE3QixJQUE2Q0wsT0FBN0MsRUFGRjs7QUFJRCxHQWREOztBQWdCQVIsT0FBSyw2Q0FBTCxFQUFvRCxZQUFNO0FBQ3hELFFBQU1RLFVBQVUsQ0FBaEI7QUFDQSxRQUFNSDtBQUNERCw0QkFEQztBQUVKUyxzQkFBZ0IsQ0FBQyxFQUFFSixJQUFJLENBQU4sRUFBRCxFQUFZLEVBQUVBLElBQUksQ0FBTixFQUFaLENBRlosR0FBTjs7QUFJQSxRQUFNQyxXQUFXLCtCQUFpQkwsUUFBakIsRUFBMkI7QUFDMUNFLFlBQU1RLHdDQURvQztBQUUxQ1Asc0JBRjBDLEVBQTNCLENBQWpCOztBQUlBUCxXQUFPUyxRQUFQLEVBQWlCRSxPQUFqQjtBQUNLUCxZQURMO0FBRUVRLHNCQUFnQixDQUFDLEVBQUVKLElBQUksQ0FBTixFQUFELENBRmxCOztBQUlELEdBZEQ7O0FBZ0JBVCxPQUFLLDZDQUFMLEVBQW9ELFlBQU07QUFDeEQsUUFBTVEsVUFBVSxFQUFFQyxJQUFJLENBQU4sRUFBU0gsS0FBSyxDQUFkLEVBQWhCO0FBQ0EsUUFBTUQ7QUFDREQsNEJBREM7QUFFSlMsc0JBQWdCLENBQUMsRUFBRUosSUFBSSxDQUFOLEVBQUQsRUFBWSxFQUFFQSxJQUFJLENBQU4sRUFBWixDQUZaLEdBQU47O0FBSUEsUUFBTUMsV0FBVywrQkFBaUJMLFFBQWpCLEVBQTJCO0FBQzFDRSxZQUFNUyx3Q0FEb0M7QUFFMUNSLHNCQUYwQyxFQUEzQixDQUFqQjs7QUFJQVAsV0FBT1MsUUFBUCxFQUFpQkUsT0FBakI7QUFDS1AsWUFETDtBQUVFUSxzQkFBZ0IsQ0FBQyxFQUFFSixJQUFJLENBQU4sRUFBRCxFQUFZRCxPQUFaLENBRmxCOztBQUlELEdBZEQ7O0FBZ0JBUixPQUFLLHNDQUFMLEVBQTZDLFlBQU07QUFDakQsUUFBTUs7QUFDREQsNEJBREM7QUFFSmEsZ0JBQVVDLCtCQUZOLEdBQU47O0FBSUEsUUFBTVIsV0FBVywrQkFBaUJMLFFBQWpCLEVBQTJCO0FBQzFDRSxZQUFNWSxpQ0FEb0M7QUFFMUNYLGVBQVNZLGdDQUZpQyxFQUEzQixDQUFqQjs7QUFJQW5CLFdBQU9TLFFBQVAsRUFBaUJFLE9BQWpCO0FBQ0tQLFlBREw7QUFFRVksZ0JBQVVHLGdDQUZaOztBQUlELEdBYkQ7QUFjRCxDQXBGRCxFIiwiZmlsZSI6InJlZHVjZXIudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIElOSVRJQUxfU1RBVEUsXG4gIEZFVENIX0RBU0hCT0FSRF9TVUNDRVNTLFxuICBDSEFOR0VfVklTSUJJTElUWV9UWVBFLFxuICBBRERfREFTSEJPQVJEX0lURU1fU1VDQ0VTUyxcbiAgREVMRVRFX0RBU0hCT0FSRF9JVEVNX1NVQ0NFU1MsXG4gIFVQREFURV9EQVNIQk9BUkRfSVRFTV9TVUNDRVNTLFxuICBEQVNIQk9BUkRTX1RBQkxFX1ZJRVcsXG4gIERBU0hCT0FSRFNfR1JJRF9WSUVXLFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkYXNoYm9hcmRSZWR1Y2VyIH0gZnJvbSAnLi9yZWR1Y2VyJztcblxuZGVzY3JpYmUoJ2Rhc2hib2FyZCByZWR1Y2VyJywgKCkgPT4ge1xuICB0ZXN0KCdzaG91bGQgcmV0dXJuIGluaXRpYWwgc3RhdGUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRhc2hib2FyZFJlZHVjZXIodW5kZWZpbmVkLCB7fSkpLnRvQmUoSU5JVElBTF9TVEFURSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCByZXR1cm4gb2xkIHN0YXRlIG9uIHVua25vd24gYWN0aW9uJywgKCkgPT4ge1xuICAgIGNvbnN0IG9sZFN0YXRlID0geyBmb286IDEgfTtcbiAgICBleHBlY3QoZGFzaGJvYXJkUmVkdWNlcihvbGRTdGF0ZSwgeyB0eXBlOiAnZm9vJyB9KSkudG9CZShvbGRTdGF0ZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBoYW5kbGUgRkVUQ0hfREFTSEJPQVJEX1NVQ0NFU1MnLCAoKSA9PiB7XG4gICAgY29uc3QgcGF5bG9hZCA9IFt7IGlkOiAwIH0sIHsgaWQ6IDEgfV07XG4gICAgY29uc3QgbmV3U3RhdGUgPSBkYXNoYm9hcmRSZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogRkVUQ0hfREFTSEJPQVJEX1NVQ0NFU1MsXG4gICAgICBwYXlsb2FkLFxuICAgIH0pO1xuICAgIGV4cGVjdChuZXdTdGF0ZSkudG9FcXVhbCh7XG4gICAgICAuLi5JTklUSUFMX1NUQVRFLFxuICAgICAgZGFzaGJvYXJkSXRlbXM6IHBheWxvYWQsXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBoYW5kbGUgQUREX0RBU0hCT0FSRF9JVEVNX1NVQ0NFU1MnLCAoKSA9PiB7XG4gICAgY29uc3QgcGF5bG9hZCA9IHsgaWQ6IDEgfTtcbiAgICBjb25zdCBvbGRTdGF0ZSA9IHtcbiAgICAgIC4uLklOSVRJQUxfU1RBVEUsXG4gICAgICBkYXNoYm9hcmRJdGVtczogW3sgaWQ6IDAgfV0sXG4gICAgfTtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IGRhc2hib2FyZFJlZHVjZXIob2xkU3RhdGUsIHtcbiAgICAgIHR5cGU6IEFERF9EQVNIQk9BUkRfSVRFTV9TVUNDRVNTLFxuICAgICAgcGF5bG9hZCxcbiAgICB9KTtcbiAgICBleHBlY3QobmV3U3RhdGUpLnRvRXF1YWwoe1xuICAgICAgLi4ub2xkU3RhdGUsXG4gICAgICBkYXNoYm9hcmRJdGVtczogWy4uLm9sZFN0YXRlLmRhc2hib2FyZEl0ZW1zLCBwYXlsb2FkXSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGhhbmRsZSBERUxFVEVfREFTSEJPQVJEX0lURU1fU1VDQ0VTUycsICgpID0+IHtcbiAgICBjb25zdCBwYXlsb2FkID0gMTtcbiAgICBjb25zdCBvbGRTdGF0ZSA9IHtcbiAgICAgIC4uLklOSVRJQUxfU1RBVEUsXG4gICAgICBkYXNoYm9hcmRJdGVtczogW3sgaWQ6IDAgfSwgeyBpZDogMSB9XSxcbiAgICB9O1xuICAgIGNvbnN0IG5ld1N0YXRlID0gZGFzaGJvYXJkUmVkdWNlcihvbGRTdGF0ZSwge1xuICAgICAgdHlwZTogREVMRVRFX0RBU0hCT0FSRF9JVEVNX1NVQ0NFU1MsXG4gICAgICBwYXlsb2FkLFxuICAgIH0pO1xuICAgIGV4cGVjdChuZXdTdGF0ZSkudG9FcXVhbCh7XG4gICAgICAuLi5vbGRTdGF0ZSxcbiAgICAgIGRhc2hib2FyZEl0ZW1zOiBbeyBpZDogMCB9XSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGhhbmRsZSBVUERBVEVfREFTSEJPQVJEX0lURU1fU1VDQ0VTUycsICgpID0+IHtcbiAgICBjb25zdCBwYXlsb2FkID0geyBpZDogMSwgZm9vOiAyIH07XG4gICAgY29uc3Qgb2xkU3RhdGUgPSB7XG4gICAgICAuLi5JTklUSUFMX1NUQVRFLFxuICAgICAgZGFzaGJvYXJkSXRlbXM6IFt7IGlkOiAwIH0sIHsgaWQ6IDEgfV0sXG4gICAgfTtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IGRhc2hib2FyZFJlZHVjZXIob2xkU3RhdGUsIHtcbiAgICAgIHR5cGU6IFVQREFURV9EQVNIQk9BUkRfSVRFTV9TVUNDRVNTLFxuICAgICAgcGF5bG9hZCxcbiAgICB9KTtcbiAgICBleHBlY3QobmV3U3RhdGUpLnRvRXF1YWwoe1xuICAgICAgLi4ub2xkU3RhdGUsXG4gICAgICBkYXNoYm9hcmRJdGVtczogW3sgaWQ6IDAgfSwgcGF5bG9hZF0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBoYW5kbGUgQ0hBTkdFX1ZJU0lCSUxJVFlfVFlQRScsICgpID0+IHtcbiAgICBjb25zdCBvbGRTdGF0ZSA9IHtcbiAgICAgIC4uLklOSVRJQUxfU1RBVEUsXG4gICAgICBncmlkVHlwZTogREFTSEJPQVJEU19HUklEX1ZJRVcsXG4gICAgfTtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IGRhc2hib2FyZFJlZHVjZXIob2xkU3RhdGUsIHtcbiAgICAgIHR5cGU6IENIQU5HRV9WSVNJQklMSVRZX1RZUEUsXG4gICAgICBwYXlsb2FkOiBEQVNIQk9BUkRTX1RBQkxFX1ZJRVcsXG4gICAgfSk7XG4gICAgZXhwZWN0KG5ld1N0YXRlKS50b0VxdWFsKHtcbiAgICAgIC4uLm9sZFN0YXRlLFxuICAgICAgZ3JpZFR5cGU6IERBU0hCT0FSRFNfVEFCTEVfVklFVyxcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==