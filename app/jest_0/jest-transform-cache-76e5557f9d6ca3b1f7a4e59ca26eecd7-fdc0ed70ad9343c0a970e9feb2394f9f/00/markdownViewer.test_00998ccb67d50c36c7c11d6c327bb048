319d03ca57e40a11b278f1fae31ec252
'use strict';var _enzyme = require('enzyme');
var _markdownViewer = require('./markdownViewer');

var boldMock = '**bold**';
var italicMock = '*italic*';
var strikethroughMock = '~~strikethrough~~';
var unorderedListMock = [
'* Generic list item',
'* Generic list item',
'* Generic list item'].
join('\n');
var orderedListMock = [
'1. Numbered list item',
'2. Numbered list item',
'3. Numbered list item'].
join('\n');
var linkMock = '[Report portal](http://reportportal.io/)';
var quoteMock = '> This is a quote.';
var codeMock = '`var example = "hello!";`';

describe('<MarkdownViewer />', function () {
  test('bold elements are rendering correctly', function () {
    var wrapper = (0, _enzyme.mount)(
    React.createElement(_markdownViewer.MarkdownViewer, { value: boldMock }));

    expect(wrapper.contains(React.createElement('strong', null, 'bold'))).toBeTruthy();
  });
  test('italic elements are rendering correctly', function () {
    var wrapper = (0, _enzyme.mount)(
    React.createElement(_markdownViewer.MarkdownViewer, { value: italicMock }));

    expect(wrapper.contains(React.createElement('em', null, 'italic'))).toBeTruthy();
  });
  test('strikethrough elements are rendering correctly', function () {
    var wrapper = (0, _enzyme.mount)(
    React.createElement(_markdownViewer.MarkdownViewer, { value: strikethroughMock }));

    expect(wrapper.contains(React.createElement('del', null, 'strikethrough'))).toBeTruthy();
  });
  test('unordered lists are rendering correctly', function () {
    var wrapper = (0, _enzyme.mount)(
    React.createElement(_markdownViewer.MarkdownViewer, { value: unorderedListMock }));

    expect(wrapper.find('.markdown-viewer').children()).toHaveLength(1);
    expect(wrapper.find('.markdown-viewer').childAt(0).type()).toEqual('ul');
    expect(wrapper.find('.markdown-viewer ul').children()).toHaveLength(3);
    expect(wrapper.find('.markdown-viewer ul').childAt(0).type()).toEqual('li');
    expect(wrapper.find('.markdown-viewer ul').childAt(0).html()).toEqual('<li>Generic list item</li>');
  });
  test('ordered lists are rendering correctly', function () {
    var wrapper = (0, _enzyme.mount)(
    React.createElement(_markdownViewer.MarkdownViewer, { value: orderedListMock }));

    expect(wrapper.find('.markdown-viewer').children()).toHaveLength(1);
    expect(wrapper.find('.markdown-viewer').childAt(0).type()).toEqual('ol');
    expect(wrapper.find('.markdown-viewer ol').children()).toHaveLength(3);
    expect(wrapper.find('.markdown-viewer ol').childAt(0).type()).toEqual('li');
    expect(wrapper.find('.markdown-viewer ol').childAt(0).html()).toEqual('<li>Numbered list item</li>');
  });
  test('links are rendering correctly', function () {
    var wrapper = (0, _enzyme.mount)(
    React.createElement(_markdownViewer.MarkdownViewer, { value: linkMock }));

    expect(wrapper.find('.markdown-viewer a')).toHaveLength(1);
    expect(wrapper.find('.markdown-viewer a').prop('href')).toEqual('http://reportportal.io/');
  });
  test('quote elements are rendering correctly', function () {
    var wrapper = (0, _enzyme.mount)(
    React.createElement(_markdownViewer.MarkdownViewer, { value: quoteMock }));

    expect(wrapper.find('.markdown-viewer blockquote')).toHaveLength(1);
    expect(wrapper.find('.markdown-viewer blockquote').childAt(0).html()).toEqual('<p>This is a quote.</p>');
  });
  test('codeMock elements are rendering correctly', function () {
    var wrapper = (0, _enzyme.mount)(
    React.createElement(_markdownViewer.MarkdownViewer, { value: codeMock }));

    expect(wrapper.find('.markdown-viewer code')).toHaveLength(1);
    expect(wrapper.find('.markdown-viewer code').text()).toEqual('var example = "hello!";');
  });
});;var _temp = function () {if (typeof __REACT_HOT_LOADER__ === 'undefined') {return;}__REACT_HOT_LOADER__.register(boldMock, 'boldMock', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/components/main/markdown/markdownViewer/markdownViewer.test.jsx');__REACT_HOT_LOADER__.register(italicMock, 'italicMock', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/components/main/markdown/markdownViewer/markdownViewer.test.jsx');__REACT_HOT_LOADER__.register(strikethroughMock, 'strikethroughMock', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/components/main/markdown/markdownViewer/markdownViewer.test.jsx');__REACT_HOT_LOADER__.register(unorderedListMock, 'unorderedListMock', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/components/main/markdown/markdownViewer/markdownViewer.test.jsx');__REACT_HOT_LOADER__.register(orderedListMock, 'orderedListMock', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/components/main/markdown/markdownViewer/markdownViewer.test.jsx');__REACT_HOT_LOADER__.register(linkMock, 'linkMock', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/components/main/markdown/markdownViewer/markdownViewer.test.jsx');__REACT_HOT_LOADER__.register(quoteMock, 'quoteMock', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/components/main/markdown/markdownViewer/markdownViewer.test.jsx');__REACT_HOT_LOADER__.register(codeMock, 'codeMock', '/volumeC/workspace/service-ui - RELEASE/src/github.com/reportportal/service-ui/app/src/components/main/markdown/markdownViewer/markdownViewer.test.jsx');}();;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,