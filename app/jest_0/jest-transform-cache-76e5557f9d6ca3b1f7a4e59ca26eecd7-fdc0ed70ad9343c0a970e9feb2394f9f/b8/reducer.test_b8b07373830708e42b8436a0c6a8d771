65990299aeb231b8944c2e0d54f0b3d5
'use strict';var _constants = require('./constants');






var _reducer = require('./reducer');

describe('user reducer', function () {
  describe('settingsReducer', function () {
    test('should return initial state', function () {
      expect((0, _reducer.settingsReducer)(undefined, {})).toBe(_constants.SETTINGS_INITIAL_STATE);
    });

    test('should return old state on unknown action', function () {
      var oldState = { foo: 1 };
      expect((0, _reducer.settingsReducer)(oldState, { type: 'foo' })).toBe(oldState);
    });

    test('should handle SET_START_TIME_FORMAT', function () {
      var payload = _constants.START_TIME_FORMAT_ABSOLUTE;
      var newState = (0, _reducer.settingsReducer)(_constants.SETTINGS_INITIAL_STATE, {
        type: _constants.SET_START_TIME_FORMAT,
        payload: payload });

      expect(newState).toEqual({
        startTimeFormat: payload });

    });
  });

  describe('userInfoReducer', function () {
    test('should return initial state', function () {
      expect((0, _reducer.userInfoReducer)(undefined, {})).toEqual({});
    });

    test('should return old state on unknown action', function () {
      var oldState = { foo: 1 };
      expect((0, _reducer.userInfoReducer)(oldState, { type: 'foo' })).toBe(oldState);
    });

    test('should handle FETCH_USER_SUCCESS', function () {
      var payload = { id: 0 };
      var newState = (0, _reducer.userInfoReducer)(undefined, {
        type: _constants.FETCH_USER_SUCCESS,
        payload: payload });

      expect(newState).toEqual(payload);
    });
  });

  describe('activeProjectReducer', function () {
    test('should return initial state', function () {
      expect((0, _reducer.activeProjectReducer)(undefined, {})).toEqual('');
    });

    test('should return old state on unknown action', function () {
      var oldState = { foo: 1 };
      expect((0, _reducer.activeProjectReducer)(oldState, { type: 'foo' })).toBe(oldState);
    });

    test('should handle SET_ACTIVE_PROJECT', function () {
      var payload = 'testProject';
      var newState = (0, _reducer.activeProjectReducer)(undefined, {
        type: _constants.SET_ACTIVE_PROJECT,
        payload: payload });

      expect(newState).toEqual(payload);
    });
  });
});;var _temp = function () {if (typeof __REACT_HOT_LOADER__ === 'undefined') {return;}}();;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZXIudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsInRlc3QiLCJleHBlY3QiLCJ1bmRlZmluZWQiLCJ0b0JlIiwiU0VUVElOR1NfSU5JVElBTF9TVEFURSIsIm9sZFN0YXRlIiwiZm9vIiwidHlwZSIsInBheWxvYWQiLCJTVEFSVF9USU1FX0ZPUk1BVF9BQlNPTFVURSIsIm5ld1N0YXRlIiwiU0VUX1NUQVJUX1RJTUVfRk9STUFUIiwidG9FcXVhbCIsInN0YXJ0VGltZUZvcm1hdCIsImlkIiwiRkVUQ0hfVVNFUl9TVUNDRVNTIiwiU0VUX0FDVElWRV9QUk9KRUNUIl0sIm1hcHBpbmdzIjoiYUFBQTs7Ozs7OztBQU9BOztBQUVBQSxTQUFTLGNBQVQsRUFBeUIsWUFBTTtBQUM3QkEsV0FBUyxpQkFBVCxFQUE0QixZQUFNO0FBQ2hDQyxTQUFLLDZCQUFMLEVBQW9DLFlBQU07QUFDeENDLGFBQU8sOEJBQWdCQyxTQUFoQixFQUEyQixFQUEzQixDQUFQLEVBQXVDQyxJQUF2QyxDQUE0Q0MsaUNBQTVDO0FBQ0QsS0FGRDs7QUFJQUosU0FBSywyQ0FBTCxFQUFrRCxZQUFNO0FBQ3RELFVBQU1LLFdBQVcsRUFBRUMsS0FBSyxDQUFQLEVBQWpCO0FBQ0FMLGFBQU8sOEJBQWdCSSxRQUFoQixFQUEwQixFQUFFRSxNQUFNLEtBQVIsRUFBMUIsQ0FBUCxFQUFtREosSUFBbkQsQ0FBd0RFLFFBQXhEO0FBQ0QsS0FIRDs7QUFLQUwsU0FBSyxxQ0FBTCxFQUE0QyxZQUFNO0FBQ2hELFVBQU1RLFVBQVVDLHFDQUFoQjtBQUNBLFVBQU1DLFdBQVcsOEJBQWdCTixpQ0FBaEIsRUFBd0M7QUFDdkRHLGNBQU1JLGdDQURpRDtBQUV2REgsd0JBRnVELEVBQXhDLENBQWpCOztBQUlBUCxhQUFPUyxRQUFQLEVBQWlCRSxPQUFqQixDQUF5QjtBQUN2QkMseUJBQWlCTCxPQURNLEVBQXpCOztBQUdELEtBVEQ7QUFVRCxHQXBCRDs7QUFzQkFULFdBQVMsaUJBQVQsRUFBNEIsWUFBTTtBQUNoQ0MsU0FBSyw2QkFBTCxFQUFvQyxZQUFNO0FBQ3hDQyxhQUFPLDhCQUFnQkMsU0FBaEIsRUFBMkIsRUFBM0IsQ0FBUCxFQUF1Q1UsT0FBdkMsQ0FBK0MsRUFBL0M7QUFDRCxLQUZEOztBQUlBWixTQUFLLDJDQUFMLEVBQWtELFlBQU07QUFDdEQsVUFBTUssV0FBVyxFQUFFQyxLQUFLLENBQVAsRUFBakI7QUFDQUwsYUFBTyw4QkFBZ0JJLFFBQWhCLEVBQTBCLEVBQUVFLE1BQU0sS0FBUixFQUExQixDQUFQLEVBQW1ESixJQUFuRCxDQUF3REUsUUFBeEQ7QUFDRCxLQUhEOztBQUtBTCxTQUFLLGtDQUFMLEVBQXlDLFlBQU07QUFDN0MsVUFBTVEsVUFBVSxFQUFFTSxJQUFJLENBQU4sRUFBaEI7QUFDQSxVQUFNSixXQUFXLDhCQUFnQlIsU0FBaEIsRUFBMkI7QUFDMUNLLGNBQU1RLDZCQURvQztBQUUxQ1Asd0JBRjBDLEVBQTNCLENBQWpCOztBQUlBUCxhQUFPUyxRQUFQLEVBQWlCRSxPQUFqQixDQUF5QkosT0FBekI7QUFDRCxLQVBEO0FBUUQsR0FsQkQ7O0FBb0JBVCxXQUFTLHNCQUFULEVBQWlDLFlBQU07QUFDckNDLFNBQUssNkJBQUwsRUFBb0MsWUFBTTtBQUN4Q0MsYUFBTyxtQ0FBcUJDLFNBQXJCLEVBQWdDLEVBQWhDLENBQVAsRUFBNENVLE9BQTVDLENBQW9ELEVBQXBEO0FBQ0QsS0FGRDs7QUFJQVosU0FBSywyQ0FBTCxFQUFrRCxZQUFNO0FBQ3RELFVBQU1LLFdBQVcsRUFBRUMsS0FBSyxDQUFQLEVBQWpCO0FBQ0FMLGFBQU8sbUNBQXFCSSxRQUFyQixFQUErQixFQUFFRSxNQUFNLEtBQVIsRUFBL0IsQ0FBUCxFQUF3REosSUFBeEQsQ0FBNkRFLFFBQTdEO0FBQ0QsS0FIRDs7QUFLQUwsU0FBSyxrQ0FBTCxFQUF5QyxZQUFNO0FBQzdDLFVBQU1RLFVBQVUsYUFBaEI7QUFDQSxVQUFNRSxXQUFXLG1DQUFxQlIsU0FBckIsRUFBZ0M7QUFDL0NLLGNBQU1TLDZCQUR5QztBQUUvQ1Isd0JBRitDLEVBQWhDLENBQWpCOztBQUlBUCxhQUFPUyxRQUFQLEVBQWlCRSxPQUFqQixDQUF5QkosT0FBekI7QUFDRCxLQVBEO0FBUUQsR0FsQkQ7QUFtQkQsQ0E5REQsRSIsImZpbGUiOiJyZWR1Y2VyLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBGRVRDSF9VU0VSX1NVQ0NFU1MsXG4gIFNFVF9BQ1RJVkVfUFJPSkVDVCxcbiAgU0VUX1NUQVJUX1RJTUVfRk9STUFULFxuICBTRVRUSU5HU19JTklUSUFMX1NUQVRFLFxuICBTVEFSVF9USU1FX0ZPUk1BVF9BQlNPTFVURSxcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgc2V0dGluZ3NSZWR1Y2VyLCB1c2VySW5mb1JlZHVjZXIsIGFjdGl2ZVByb2plY3RSZWR1Y2VyIH0gZnJvbSAnLi9yZWR1Y2VyJztcblxuZGVzY3JpYmUoJ3VzZXIgcmVkdWNlcicsICgpID0+IHtcbiAgZGVzY3JpYmUoJ3NldHRpbmdzUmVkdWNlcicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIGluaXRpYWwgc3RhdGUnLCAoKSA9PiB7XG4gICAgICBleHBlY3Qoc2V0dGluZ3NSZWR1Y2VyKHVuZGVmaW5lZCwge30pKS50b0JlKFNFVFRJTkdTX0lOSVRJQUxfU1RBVEUpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJldHVybiBvbGQgc3RhdGUgb24gdW5rbm93biBhY3Rpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBvbGRTdGF0ZSA9IHsgZm9vOiAxIH07XG4gICAgICBleHBlY3Qoc2V0dGluZ3NSZWR1Y2VyKG9sZFN0YXRlLCB7IHR5cGU6ICdmb28nIH0pKS50b0JlKG9sZFN0YXRlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgU0VUX1NUQVJUX1RJTUVfRk9STUFUJywgKCkgPT4ge1xuICAgICAgY29uc3QgcGF5bG9hZCA9IFNUQVJUX1RJTUVfRk9STUFUX0FCU09MVVRFO1xuICAgICAgY29uc3QgbmV3U3RhdGUgPSBzZXR0aW5nc1JlZHVjZXIoU0VUVElOR1NfSU5JVElBTF9TVEFURSwge1xuICAgICAgICB0eXBlOiBTRVRfU1RBUlRfVElNRV9GT1JNQVQsXG4gICAgICAgIHBheWxvYWQsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChuZXdTdGF0ZSkudG9FcXVhbCh7XG4gICAgICAgIHN0YXJ0VGltZUZvcm1hdDogcGF5bG9hZCxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgndXNlckluZm9SZWR1Y2VyJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gaW5pdGlhbCBzdGF0ZScsICgpID0+IHtcbiAgICAgIGV4cGVjdCh1c2VySW5mb1JlZHVjZXIodW5kZWZpbmVkLCB7fSkpLnRvRXF1YWwoe30pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJldHVybiBvbGQgc3RhdGUgb24gdW5rbm93biBhY3Rpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBvbGRTdGF0ZSA9IHsgZm9vOiAxIH07XG4gICAgICBleHBlY3QodXNlckluZm9SZWR1Y2VyKG9sZFN0YXRlLCB7IHR5cGU6ICdmb28nIH0pKS50b0JlKG9sZFN0YXRlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgRkVUQ0hfVVNFUl9TVUNDRVNTJywgKCkgPT4ge1xuICAgICAgY29uc3QgcGF5bG9hZCA9IHsgaWQ6IDAgfTtcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gdXNlckluZm9SZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgICB0eXBlOiBGRVRDSF9VU0VSX1NVQ0NFU1MsXG4gICAgICAgIHBheWxvYWQsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChuZXdTdGF0ZSkudG9FcXVhbChwYXlsb2FkKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2FjdGl2ZVByb2plY3RSZWR1Y2VyJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gaW5pdGlhbCBzdGF0ZScsICgpID0+IHtcbiAgICAgIGV4cGVjdChhY3RpdmVQcm9qZWN0UmVkdWNlcih1bmRlZmluZWQsIHt9KSkudG9FcXVhbCgnJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIG9sZCBzdGF0ZSBvbiB1bmtub3duIGFjdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IG9sZFN0YXRlID0geyBmb286IDEgfTtcbiAgICAgIGV4cGVjdChhY3RpdmVQcm9qZWN0UmVkdWNlcihvbGRTdGF0ZSwgeyB0eXBlOiAnZm9vJyB9KSkudG9CZShvbGRTdGF0ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIFNFVF9BQ1RJVkVfUFJPSkVDVCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHBheWxvYWQgPSAndGVzdFByb2plY3QnO1xuICAgICAgY29uc3QgbmV3U3RhdGUgPSBhY3RpdmVQcm9qZWN0UmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgICAgdHlwZTogU0VUX0FDVElWRV9QUk9KRUNULFxuICAgICAgICBwYXlsb2FkLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QobmV3U3RhdGUpLnRvRXF1YWwocGF5bG9hZCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=