a2e6b5a829f3d6323385a8c2f8348106
'use strict';var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);var _extends2 = require('babel-runtime/helpers/extends');var _extends3 = _interopRequireDefault(_extends2);var _reducer = require('./reducer');
var _constants = require('./constants');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}







describe('project reducer', function () {
  describe('projectInfoReducer', function () {
    test('should return initial state', function () {
      expect((0, _reducer.projectInfoReducer)(undefined, {})).toBe(_constants.PROJECT_INFO_INITIAL_STATE);
    });

    test('should return old state on unknown action', function () {
      var oldState = { foo: 1 };
      expect((0, _reducer.projectInfoReducer)(oldState, { type: 'foo' })).toBe(oldState);
    });

    test('should handle FETCH_PROJECT_SUCCESS', function () {
      var payload = { foo: 'bar' };
      var newState = (0, _reducer.projectInfoReducer)(_constants.PROJECT_INFO_INITIAL_STATE, {
        type: _constants.FETCH_PROJECT_SUCCESS,
        payload: payload });

      expect(newState).toEqual(payload);
    });
  });

  describe('projectPreferencesReducer', function () {
    test('should return initial state', function () {
      expect((0, _reducer.projectPreferencesReducer)(undefined, {})).toBe(_constants.PROJECT_PREFERENCES_INITIAL_STATE);
    });

    test('should return old state on unknown action', function () {
      var oldState = { filters: ['filter1'] };
      expect((0, _reducer.projectPreferencesReducer)(oldState, { type: 'foo' })).toBe(oldState);
    });

    test('shoud handle FETCH_PROJECT_PREFERENCES_SUCCESS', function () {
      var payload = { filters: ['filter1'] };
      var newState = (0, _reducer.projectPreferencesReducer)(_constants.PROJECT_INFO_INITIAL_STATE, {
        type: _constants.FETCH_PROJECT_PREFERENCES_SUCCESS,
        payload: payload });

      expect(newState).toEqual(payload);
    });

    test('should handle TOGGLE_DISPLAY_FILTER_ON_LAUNCHES', function () {
      var oldState = (0, _extends3.default)({},
      _constants.PROJECT_PREFERENCES_INITIAL_STATE, {
        filters: ['filter0'] });

      var payload = 'filter1';
      var stateWithFilter = (0, _reducer.projectPreferencesReducer)(oldState, {
        type: _constants.TOGGLE_DISPLAY_FILTER_ON_LAUNCHES,
        payload: payload });

      expect(stateWithFilter).toEqual((0, _extends3.default)({},
      oldState, {
        filters: [].concat((0, _toConsumableArray3.default)(oldState.filters), [payload]) }));

      var stateWithoutFilter = (0, _reducer.projectPreferencesReducer)(stateWithFilter, {
        type: _constants.TOGGLE_DISPLAY_FILTER_ON_LAUNCHES,
        payload: payload });

      expect(stateWithoutFilter).toEqual(oldState);
    });
  });
});;var _temp = function () {if (typeof __REACT_HOT_LOADER__ === 'undefined') {return;}}();;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZXIudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsInRlc3QiLCJleHBlY3QiLCJ1bmRlZmluZWQiLCJ0b0JlIiwiUFJPSkVDVF9JTkZPX0lOSVRJQUxfU1RBVEUiLCJvbGRTdGF0ZSIsImZvbyIsInR5cGUiLCJwYXlsb2FkIiwibmV3U3RhdGUiLCJGRVRDSF9QUk9KRUNUX1NVQ0NFU1MiLCJ0b0VxdWFsIiwiUFJPSkVDVF9QUkVGRVJFTkNFU19JTklUSUFMX1NUQVRFIiwiZmlsdGVycyIsIkZFVENIX1BST0pFQ1RfUFJFRkVSRU5DRVNfU1VDQ0VTUyIsInN0YXRlV2l0aEZpbHRlciIsIlRPR0dMRV9ESVNQTEFZX0ZJTFRFUl9PTl9MQVVOQ0hFUyIsInN0YXRlV2l0aG91dEZpbHRlciJdLCJtYXBwaW5ncyI6IjJRQUFBO0FBQ0Esd0M7Ozs7Ozs7O0FBUUFBLFNBQVMsaUJBQVQsRUFBNEIsWUFBTTtBQUNoQ0EsV0FBUyxvQkFBVCxFQUErQixZQUFNO0FBQ25DQyxTQUFLLDZCQUFMLEVBQW9DLFlBQU07QUFDeENDLGFBQU8saUNBQW1CQyxTQUFuQixFQUE4QixFQUE5QixDQUFQLEVBQTBDQyxJQUExQyxDQUErQ0MscUNBQS9DO0FBQ0QsS0FGRDs7QUFJQUosU0FBSywyQ0FBTCxFQUFrRCxZQUFNO0FBQ3RELFVBQU1LLFdBQVcsRUFBRUMsS0FBSyxDQUFQLEVBQWpCO0FBQ0FMLGFBQU8saUNBQW1CSSxRQUFuQixFQUE2QixFQUFFRSxNQUFNLEtBQVIsRUFBN0IsQ0FBUCxFQUFzREosSUFBdEQsQ0FBMkRFLFFBQTNEO0FBQ0QsS0FIRDs7QUFLQUwsU0FBSyxxQ0FBTCxFQUE0QyxZQUFNO0FBQ2hELFVBQU1RLFVBQVUsRUFBRUYsS0FBSyxLQUFQLEVBQWhCO0FBQ0EsVUFBTUcsV0FBVyxpQ0FBbUJMLHFDQUFuQixFQUErQztBQUM5REcsY0FBTUcsZ0NBRHdEO0FBRTlERix3QkFGOEQsRUFBL0MsQ0FBakI7O0FBSUFQLGFBQU9RLFFBQVAsRUFBaUJFLE9BQWpCLENBQXlCSCxPQUF6QjtBQUNELEtBUEQ7QUFRRCxHQWxCRDs7QUFvQkFULFdBQVMsMkJBQVQsRUFBc0MsWUFBTTtBQUMxQ0MsU0FBSyw2QkFBTCxFQUFvQyxZQUFNO0FBQ3hDQyxhQUFPLHdDQUEwQkMsU0FBMUIsRUFBcUMsRUFBckMsQ0FBUCxFQUFpREMsSUFBakQsQ0FBc0RTLDRDQUF0RDtBQUNELEtBRkQ7O0FBSUFaLFNBQUssMkNBQUwsRUFBa0QsWUFBTTtBQUN0RCxVQUFNSyxXQUFXLEVBQUVRLFNBQVMsQ0FBQyxTQUFELENBQVgsRUFBakI7QUFDQVosYUFBTyx3Q0FBMEJJLFFBQTFCLEVBQW9DLEVBQUVFLE1BQU0sS0FBUixFQUFwQyxDQUFQLEVBQTZESixJQUE3RCxDQUFrRUUsUUFBbEU7QUFDRCxLQUhEOztBQUtBTCxTQUFLLGdEQUFMLEVBQXVELFlBQU07QUFDM0QsVUFBTVEsVUFBVSxFQUFFSyxTQUFTLENBQUMsU0FBRCxDQUFYLEVBQWhCO0FBQ0EsVUFBTUosV0FBVyx3Q0FBMEJMLHFDQUExQixFQUFzRDtBQUNyRUcsY0FBTU8sNENBRCtEO0FBRXJFTix3QkFGcUUsRUFBdEQsQ0FBakI7O0FBSUFQLGFBQU9RLFFBQVAsRUFBaUJFLE9BQWpCLENBQXlCSCxPQUF6QjtBQUNELEtBUEQ7O0FBU0FSLFNBQUssaURBQUwsRUFBd0QsWUFBTTtBQUM1RCxVQUFNSztBQUNETyxrREFEQztBQUVKQyxpQkFBUyxDQUFDLFNBQUQsQ0FGTCxHQUFOOztBQUlBLFVBQU1MLFVBQVUsU0FBaEI7QUFDQSxVQUFNTyxrQkFBa0Isd0NBQTBCVixRQUExQixFQUFvQztBQUMxREUsY0FBTVMsNENBRG9EO0FBRTFEUix3QkFGMEQsRUFBcEMsQ0FBeEI7O0FBSUFQLGFBQU9jLGVBQVAsRUFBd0JKLE9BQXhCO0FBQ0tOLGNBREw7QUFFRVEsNERBQWFSLFNBQVNRLE9BQXRCLElBQStCTCxPQUEvQixFQUZGOztBQUlBLFVBQU1TLHFCQUFxQix3Q0FBMEJGLGVBQTFCLEVBQTJDO0FBQ3BFUixjQUFNUyw0Q0FEOEQ7QUFFcEVSLHdCQUZvRSxFQUEzQyxDQUEzQjs7QUFJQVAsYUFBT2dCLGtCQUFQLEVBQTJCTixPQUEzQixDQUFtQ04sUUFBbkM7QUFDRCxLQW5CRDtBQW9CRCxHQXZDRDtBQXdDRCxDQTdERCxFIiwiZmlsZSI6InJlZHVjZXIudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByb2plY3RJbmZvUmVkdWNlciwgcHJvamVjdFByZWZlcmVuY2VzUmVkdWNlciB9IGZyb20gJy4vcmVkdWNlcic7XG5pbXBvcnQge1xuICBQUk9KRUNUX0lORk9fSU5JVElBTF9TVEFURSxcbiAgUFJPSkVDVF9QUkVGRVJFTkNFU19JTklUSUFMX1NUQVRFLFxuICBGRVRDSF9QUk9KRUNUX1NVQ0NFU1MsXG4gIEZFVENIX1BST0pFQ1RfUFJFRkVSRU5DRVNfU1VDQ0VTUyxcbiAgVE9HR0xFX0RJU1BMQVlfRklMVEVSX09OX0xBVU5DSEVTLFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmRlc2NyaWJlKCdwcm9qZWN0IHJlZHVjZXInLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdwcm9qZWN0SW5mb1JlZHVjZXInLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHJldHVybiBpbml0aWFsIHN0YXRlJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHByb2plY3RJbmZvUmVkdWNlcih1bmRlZmluZWQsIHt9KSkudG9CZShQUk9KRUNUX0lORk9fSU5JVElBTF9TVEFURSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIG9sZCBzdGF0ZSBvbiB1bmtub3duIGFjdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IG9sZFN0YXRlID0geyBmb286IDEgfTtcbiAgICAgIGV4cGVjdChwcm9qZWN0SW5mb1JlZHVjZXIob2xkU3RhdGUsIHsgdHlwZTogJ2ZvbycgfSkpLnRvQmUob2xkU3RhdGUpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBGRVRDSF9QUk9KRUNUX1NVQ0NFU1MnLCAoKSA9PiB7XG4gICAgICBjb25zdCBwYXlsb2FkID0geyBmb286ICdiYXInIH07XG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IHByb2plY3RJbmZvUmVkdWNlcihQUk9KRUNUX0lORk9fSU5JVElBTF9TVEFURSwge1xuICAgICAgICB0eXBlOiBGRVRDSF9QUk9KRUNUX1NVQ0NFU1MsXG4gICAgICAgIHBheWxvYWQsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChuZXdTdGF0ZSkudG9FcXVhbChwYXlsb2FkKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3Byb2plY3RQcmVmZXJlbmNlc1JlZHVjZXInLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHJldHVybiBpbml0aWFsIHN0YXRlJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHByb2plY3RQcmVmZXJlbmNlc1JlZHVjZXIodW5kZWZpbmVkLCB7fSkpLnRvQmUoUFJPSkVDVF9QUkVGRVJFTkNFU19JTklUSUFMX1NUQVRFKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gb2xkIHN0YXRlIG9uIHVua25vd24gYWN0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3Qgb2xkU3RhdGUgPSB7IGZpbHRlcnM6IFsnZmlsdGVyMSddIH07XG4gICAgICBleHBlY3QocHJvamVjdFByZWZlcmVuY2VzUmVkdWNlcihvbGRTdGF0ZSwgeyB0eXBlOiAnZm9vJyB9KSkudG9CZShvbGRTdGF0ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91ZCBoYW5kbGUgRkVUQ0hfUFJPSkVDVF9QUkVGRVJFTkNFU19TVUNDRVNTJywgKCkgPT4ge1xuICAgICAgY29uc3QgcGF5bG9hZCA9IHsgZmlsdGVyczogWydmaWx0ZXIxJ10gfTtcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gcHJvamVjdFByZWZlcmVuY2VzUmVkdWNlcihQUk9KRUNUX0lORk9fSU5JVElBTF9TVEFURSwge1xuICAgICAgICB0eXBlOiBGRVRDSF9QUk9KRUNUX1BSRUZFUkVOQ0VTX1NVQ0NFU1MsXG4gICAgICAgIHBheWxvYWQsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChuZXdTdGF0ZSkudG9FcXVhbChwYXlsb2FkKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgVE9HR0xFX0RJU1BMQVlfRklMVEVSX09OX0xBVU5DSEVTJywgKCkgPT4ge1xuICAgICAgY29uc3Qgb2xkU3RhdGUgPSB7XG4gICAgICAgIC4uLlBST0pFQ1RfUFJFRkVSRU5DRVNfSU5JVElBTF9TVEFURSxcbiAgICAgICAgZmlsdGVyczogWydmaWx0ZXIwJ10sXG4gICAgICB9O1xuICAgICAgY29uc3QgcGF5bG9hZCA9ICdmaWx0ZXIxJztcbiAgICAgIGNvbnN0IHN0YXRlV2l0aEZpbHRlciA9IHByb2plY3RQcmVmZXJlbmNlc1JlZHVjZXIob2xkU3RhdGUsIHtcbiAgICAgICAgdHlwZTogVE9HR0xFX0RJU1BMQVlfRklMVEVSX09OX0xBVU5DSEVTLFxuICAgICAgICBwYXlsb2FkLFxuICAgICAgfSk7XG4gICAgICBleHBlY3Qoc3RhdGVXaXRoRmlsdGVyKS50b0VxdWFsKHtcbiAgICAgICAgLi4ub2xkU3RhdGUsXG4gICAgICAgIGZpbHRlcnM6IFsuLi5vbGRTdGF0ZS5maWx0ZXJzLCBwYXlsb2FkXSxcbiAgICAgIH0pO1xuICAgICAgY29uc3Qgc3RhdGVXaXRob3V0RmlsdGVyID0gcHJvamVjdFByZWZlcmVuY2VzUmVkdWNlcihzdGF0ZVdpdGhGaWx0ZXIsIHtcbiAgICAgICAgdHlwZTogVE9HR0xFX0RJU1BMQVlfRklMVEVSX09OX0xBVU5DSEVTLFxuICAgICAgICBwYXlsb2FkLFxuICAgICAgfSk7XG4gICAgICBleHBlY3Qoc3RhdGVXaXRob3V0RmlsdGVyKS50b0VxdWFsKG9sZFN0YXRlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==